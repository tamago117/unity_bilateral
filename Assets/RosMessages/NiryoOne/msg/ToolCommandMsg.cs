//Do not edit! This file was generated by Unity-ROS MessageGeneration.
using System;
using System.Linq;
using System.Collections.Generic;
using System.Text;
using Unity.Robotics.ROSTCPConnector.MessageGeneration;

namespace RosMessageTypes.NiryoOne
{
    [Serializable]
    public class ToolCommandMsg : Message
    {
        public const string k_RosMessageName = "niryo_one_msgs/ToolCommand";
        public override string RosMessageName => k_RosMessageName;

        public byte tool_id;
        public byte cmd_type;
        //  if gripper close
        public ushort gripper_close_speed;
        //  if gripper open
        public ushort gripper_open_speed;
        //  if vacuum pump or electromagnet grove
        public bool activate;
        //  if tool is set by digital outputs (electromagnet)
        public byte gpio;

        public ToolCommandMsg()
        {
            this.tool_id = 0;
            this.cmd_type = 0;
            this.gripper_close_speed = 0;
            this.gripper_open_speed = 0;
            this.activate = false;
            this.gpio = 0;
        }

        public ToolCommandMsg(byte tool_id, byte cmd_type, ushort gripper_close_speed, ushort gripper_open_speed, bool activate, byte gpio)
        {
            this.tool_id = tool_id;
            this.cmd_type = cmd_type;
            this.gripper_close_speed = gripper_close_speed;
            this.gripper_open_speed = gripper_open_speed;
            this.activate = activate;
            this.gpio = gpio;
        }

        public static ToolCommandMsg Deserialize(MessageDeserializer deserializer) => new ToolCommandMsg(deserializer);

        private ToolCommandMsg(MessageDeserializer deserializer)
        {
            deserializer.Read(out this.tool_id);
            deserializer.Read(out this.cmd_type);
            deserializer.Read(out this.gripper_close_speed);
            deserializer.Read(out this.gripper_open_speed);
            deserializer.Read(out this.activate);
            deserializer.Read(out this.gpio);
        }

        public override void SerializeTo(MessageSerializer serializer)
        {
            serializer.Write(this.tool_id);
            serializer.Write(this.cmd_type);
            serializer.Write(this.gripper_close_speed);
            serializer.Write(this.gripper_open_speed);
            serializer.Write(this.activate);
            serializer.Write(this.gpio);
        }

        public override string ToString()
        {
            return "ToolCommandMsg: " +
            "\ntool_id: " + tool_id.ToString() +
            "\ncmd_type: " + cmd_type.ToString() +
            "\ngripper_close_speed: " + gripper_close_speed.ToString() +
            "\ngripper_open_speed: " + gripper_open_speed.ToString() +
            "\nactivate: " + activate.ToString() +
            "\ngpio: " + gpio.ToString();
        }

#if UNITY_EDITOR
        [UnityEditor.InitializeOnLoadMethod]
#else
        [UnityEngine.RuntimeInitializeOnLoadMethod]
#endif
        public static void Register()
        {
            MessageRegistry.Register(k_RosMessageName, Deserialize);
        }
    }
}
