//Do not edit! This file was generated by Unity-ROS MessageGeneration.
using System;
using System.Linq;
using System.Collections.Generic;
using System.Text;
using Unity.Robotics.ROSTCPConnector.MessageGeneration;

namespace RosMessageTypes.NiryoOne
{
    [Serializable]
    public class ConveyorFeedbackMsg : Message
    {
        public const string k_RosMessageName = "niryo_one_msgs/ConveyorFeedback";
        public override string RosMessageName => k_RosMessageName;

        // Conveyor id ( either 6 or 7) 
        public byte conveyor_id;
        // Conveyor Connection state ( if it is enabled) 
        public bool connection_state;
        //  Conveyor Controls state : ON or OFF
        public bool running;
        //  Conveyor Speed ( 1-> 100 %)
        public short speed;
        //  Conveyor direction ( backward or forward)
        public sbyte direction;

        public ConveyorFeedbackMsg()
        {
            this.conveyor_id = 0;
            this.connection_state = false;
            this.running = false;
            this.speed = 0;
            this.direction = 0;
        }

        public ConveyorFeedbackMsg(byte conveyor_id, bool connection_state, bool running, short speed, sbyte direction)
        {
            this.conveyor_id = conveyor_id;
            this.connection_state = connection_state;
            this.running = running;
            this.speed = speed;
            this.direction = direction;
        }

        public static ConveyorFeedbackMsg Deserialize(MessageDeserializer deserializer) => new ConveyorFeedbackMsg(deserializer);

        private ConveyorFeedbackMsg(MessageDeserializer deserializer)
        {
            deserializer.Read(out this.conveyor_id);
            deserializer.Read(out this.connection_state);
            deserializer.Read(out this.running);
            deserializer.Read(out this.speed);
            deserializer.Read(out this.direction);
        }

        public override void SerializeTo(MessageSerializer serializer)
        {
            serializer.Write(this.conveyor_id);
            serializer.Write(this.connection_state);
            serializer.Write(this.running);
            serializer.Write(this.speed);
            serializer.Write(this.direction);
        }

        public override string ToString()
        {
            return "ConveyorFeedbackMsg: " +
            "\nconveyor_id: " + conveyor_id.ToString() +
            "\nconnection_state: " + connection_state.ToString() +
            "\nrunning: " + running.ToString() +
            "\nspeed: " + speed.ToString() +
            "\ndirection: " + direction.ToString();
        }

#if UNITY_EDITOR
        [UnityEditor.InitializeOnLoadMethod]
#else
        [UnityEngine.RuntimeInitializeOnLoadMethod]
#endif
        public static void Register()
        {
            MessageRegistry.Register(k_RosMessageName, Deserialize);
        }
    }
}
